<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>HealthMate - Symptom Checker</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        .symptom-tag {
            transition: all 0.2s;
        }
        .symptom-tag:hover {
            transform: scale(1.05);
        }
        .typing-indicator::after {
            content: '...';
            animation: typing 1.5s infinite;
        }
        @keyframes typing {
            0% { content: '.'; }
            33% { content: '..'; }
            66% { content: '...'; }
        }
        .fade-in {
            animation: fadeIn 0.3s ease-in;
        }
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        .pulse {
            animation: pulse 2s infinite;
        }
        @keyframes pulse {
            0% { opacity: 0.6; }
            50% { opacity: 1; }
            100% { opacity: 0.6; }
        }
    </style>
</head>
<body class="bg-gray-50 min-h-screen">
    <div class="container mx-auto max-w-4xl p-4 flex flex-col min-h-screen">
        <!-- Header -->
        <header class="bg-white shadow-sm rounded-lg p-4 mb-4">
            <div class="flex items-center justify-between">
                <div class="flex items-center space-x-3">
                    <i class="fas fa-heartbeat text-3xl text-red-500"></i>
                    <div>
                        <h1 class="text-2xl font-bold text-gray-800">HealthMate Symptom Checker</h1>
                        <div id="connection-status" class="flex items-center text-xs">
                            <span class="w-2 h-2 rounded-full bg-gray-300 mr-1"></span>
                            <span class="text-gray-500">Checking connection...</span>
                        </div>
                    </div>
                </div>
                <div class="flex space-x-2">
                    <button id="emergency-btn" class="bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded-lg flex items-center">
                        <i class="fas fa-phone-alt mr-2"></i> Emergency
                    </button>
                    <button id="new-chat-btn" class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-lg">
                        <i class="fas fa-plus mr-2"></i> New Check
                    </button>
                </div>
            </div>
            <p class="text-gray-600 mt-2 text-sm">Describe your symptoms and get potential condition information. Remember, this is not a substitute for professional medical advice.</p>
        </header>

        <!-- Chat Container -->
        <div id="message-container" class="flex-1 overflow-y-auto p-4 space-y-4 bg-white rounded-lg shadow-inner mb-4">
            <!-- Welcome Message -->
            <div class="welcome-message bg-blue-50 border border-blue-100 p-4 rounded-lg fade-in">
                <div class="flex items-start space-x-3">
                    <div class="bg-blue-100 p-2 rounded-full">
                        <i class="fas fa-robot text-blue-600"></i>
                    </div>
                    <div>
                        <h3 class="font-bold text-blue-800">Welcome to HealthMate Symptom Checker</h3>
                        <p class="text-blue-700">I can help you understand what might be causing your symptoms. Please describe:</p>
                        <ul class="list-disc pl-5 mt-2 text-blue-700">
                            <li>What symptoms you're experiencing</li>
                            <li>How long you've had them</li>
                            <li>Any other relevant health information</li>
                        </ul>
                        <div class="mt-4">
                            <p class="text-sm text-blue-600 font-semibold">Common symptoms to describe:</p>
                            <div class="flex flex-wrap gap-2 mt-2">
                                <span class="symptom-tag bg-blue-100 text-blue-800 px-3 py-1 rounded-full text-sm cursor-pointer hover:bg-blue-200">Headache</span>
                                <span class="symptom-tag bg-blue-100 text-blue-800 px-3 py-1 rounded-full text-sm cursor-pointer hover:bg-blue-200">Fever</span>
                                <span class="symptom-tag bg-blue-100 text-blue-800 px-3 py-1 rounded-full text-sm cursor-pointer hover:bg-blue-200">Cough</span>
                                <span class="symptom-tag bg-blue-100 text-blue-800 px-3 py-1 rounded-full text-sm cursor-pointer hover:bg-blue-200">Fatigue</span>
                                <span class="symptom-tag bg-blue-100 text-blue-800 px-3 py-1 rounded-full text-sm cursor-pointer hover:bg-blue-200">Nausea</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Input Area -->
        <div class="bg-white p-4 rounded-lg shadow-md">
            <div class="flex items-end space-x-2">
                <div class="flex-1">
                    <label for="user-input" class="block text-sm font-medium text-gray-700 mb-1">Describe your symptoms:</label>
                    <textarea 
                        id="user-input" 
                        rows="2"
                        placeholder="Example: I've had a headache and fever for 2 days..."
                        class="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 resize-none"
                    ></textarea>
                </div>
                <button 
                    id="send-btn" 
                    class="bg-blue-500 hover:bg-blue-600 text-white px-6 py-3 rounded-lg transition disabled:opacity-50 h-fit"
                    disabled
                >
                    <i class="fas fa-paper-plane mr-2"></i> Send
                </button>
            </div>
            <div class="mt-2 flex justify-between items-center">
                <p class="text-xs text-gray-500">Press Enter to send, Shift+Enter for new line</p>
                <div id="disclaimer" class="text-xs text-gray-500 text-right">
                    <i class="fas fa-info-circle mr-1"></i> Not a substitute for professional medical advice
                </div>
            </div>
        </div>
    </div>

    <script>
        // DOM Elements
        const messageContainer = document.getElementById('message-container');
        const userInput = document.getElementById('user-input');
        const sendBtn = document.getElementById('send-btn');
        const newChatBtn = document.getElementById('new-chat-btn');
        const emergencyBtn = document.getElementById('emergency-btn');
        const symptomTags = document.querySelectorAll('.symptom-tag');
        const connectionStatus = document.getElementById('connection-status');
        const connectionDot = connectionStatus.querySelector('span:first-child');
        const connectionText = connectionStatus.querySelector('span:last-child');

        // API Configuration
        const API_URL = 'http://localhost:8000'; // Change to your backend URL

        // Check backend connection
        async function checkConnection() {
            updateConnectionStatus('checking', 'Checking connection...');
            
            try {
                const response = await fetch(`${API_URL}/health`, {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                });

                if (response.ok) {
                    updateConnectionStatus('connected', 'Connected to HealthMate');
                } else {
                    updateConnectionStatus('disconnected', 'Service unavailable');
                }
            } catch (error) {
                updateConnectionStatus('error', 'Connection failed');
                console.error('Connection check failed:', error);
            }
        }

        // Update connection status UI
        function updateConnectionStatus(status, message) {
            connectionText.textContent = message;
            
            // Remove all color classes first
            connectionDot.classList.remove(
                'bg-gray-300', 'bg-green-500', 'bg-red-500', 'bg-yellow-500', 'pulse'
            );
            
            switch(status) {
                case 'connected':
                    connectionDot.classList.add('bg-green-500');
                    break;
                case 'disconnected':
                    connectionDot.classList.add('bg-yellow-500');
                    break;
                case 'error':
                    connectionDot.classList.add('bg-red-500', 'pulse');
                    break;
                case 'checking':
                    connectionDot.classList.add('bg-gray-300', 'pulse');
                    break;
            }
        }

        // Add a message to the chat
        function addMessage(content, isUser = false) {
            const messageDiv = document.createElement('div');
            messageDiv.className = `flex ${isUser ? 'justify-end' : 'justify-start'} fade-in`;
            
            const bubbleDiv = document.createElement('div');
            bubbleDiv.className = `max-w-3/4 p-4 rounded-lg ${
                isUser ? 'bg-blue-500 text-white' : 'bg-gray-100 text-gray-800'
            }`;
            
            // Format content with line breaks
            const formattedContent = content.replace(/\n/g, '<br>');
            bubbleDiv.innerHTML = formattedContent;
            
            messageDiv.appendChild(bubbleDiv);
            messageContainer.appendChild(messageDiv);
            messageContainer.scrollTop = messageContainer.scrollHeight;
        }

        // Show typing indicator
        function showTypingIndicator() {
            const typingDiv = document.createElement('div');
            typingDiv.className = 'flex justify-start fade-in';
            typingDiv.id = 'typing-indicator';
            
            const avatarDiv = document.createElement('div');
            avatarDiv.className = 'bg-gray-200 p-2 rounded-full mr-3';
            avatarDiv.innerHTML = '<i class="fas fa-robot text-gray-600"></i>';
            
            const bubbleDiv = document.createElement('div');
            bubbleDiv.className = 'bg-gray-200 text-gray-800 p-4 rounded-lg typing-indicator';
            bubbleDiv.textContent = 'Analyzing symptoms';
            
            typingDiv.appendChild(avatarDiv);
            typingDiv.appendChild(bubbleDiv);
            messageContainer.appendChild(typingDiv);
            messageContainer.scrollTop = messageContainer.scrollHeight;
        }

        // Hide typing indicator
        function hideTypingIndicator() {
            const typingIndicator = document.getElementById('typing-indicator');
            if (typingIndicator) {
                typingIndicator.remove();
            }
        }

        // Send message to backend
        // Modify your sendMessage() function with these improvements:
        async function sendMessage() {
    const message = userInput.value.trim();
    if (!message) return;

    // Clear previous errors
    document.querySelectorAll('.error-message').forEach(el => el.remove());
    
    // Add user message
    addMessage(message, true);
    userInput.value = '';
    sendBtn.disabled = true;
    showTypingIndicator();

    try {
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), 15000); // 15s timeout

        const response = await fetch(`${API_URL}/analyze-symptoms`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ 
                message,
                age: document.getElementById('age-input')?.value,
                gender: document.getElementById('gender-select')?.value
            }),
            signal: controller.signal
        });
        clearTimeout(timeoutId);

        const data = await response.json();

        if (!response.ok || data.status !== "success") {
            throw new Error(data.error || "Analysis failed");
        }

        // Display results
        const analysis = data.analysis;
        const formattedResponse = `
            <div class="space-y-4">
                <div class="border-b pb-4">
                    <h3 class="font-bold text-lg flex items-center">
                        <i class="fas fa-diagnoses mr-2 text-blue-500"></i>
                        Possible Conditions
                    </h3>
                    <div class="mt-3 grid gap-3 md:grid-cols-2">
                        ${analysis.possible_conditions.map(cond => `
                            <div class="p-3 bg-white rounded-lg border ${
                                cond.urgency === 'high' ? 'border-red-200 bg-red-50' : 
                                cond.urgency === 'medium' ? 'border-yellow-200 bg-yellow-50' : 
                                'border-green-200 bg-green-50'
                            }">
                                <div class="flex justify-between items-start">
                                    <span class="font-medium">${cond.name}</span>
                                    <div class="flex space-x-2">
                                        <span class="text-xs px-2 py-1 rounded-full ${
                                            cond.probability === 'high' ? 'bg-red-100 text-red-800' :
                                            cond.probability === 'medium' ? 'bg-yellow-100 text-yellow-800' :
                                            'bg-green-100 text-green-800'
                                        }">
                                            ${cond.probability}
                                        </span>
                                    </div>
                                </div>
                                ${cond.description ? `
                                <p class="mt-2 text-sm text-gray-600">
                                    <i class="fas fa-info-circle mr-1 text-gray-400"></i>
                                    ${cond.description}
                                </p>` : ''}
                            </div>
                        `).join('')}
                    </div>
                </div>
                
                <div class="border-b pb-4">
                    <h3 class="font-bold text-lg flex items-center">
                        <i class="fas fa-tasks mr-2 text-blue-500"></i>
                        Recommended Actions
                    </h3>
                    <ol class="mt-3 list-decimal pl-5 space-y-2">
                        ${analysis.recommended_actions.map(action => `
                            <li class="text-gray-700">${action}</li>
                        `).join('')}
                    </ol>
                </div>
                
                <div class="bg-blue-50 p-3 rounded-lg border border-blue-200">
                    <div class="flex items-start">
                        <i class="fas fa-exclamation-triangle mt-1 mr-2 text-blue-500"></i>
                        <div>
                            <p class="text-sm text-blue-800">${analysis.disclaimer}</p>
                            <p class="text-xs text-blue-600 mt-1">
                                <i class="far fa-clock mr-1"></i>
                                Analyzed at ${new Date().toLocaleTimeString()}
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        `;
        
        addMessage(formattedResponse, false);

    } catch (error) {
        hideTypingIndicator();
        
        let errorMessage = `
            <div class="bg-red-50 border-l-4 border-red-400 p-4 error-message rounded-lg">
                <div class="flex items-start">
                    <i class="fas fa-times-circle mt-1 mr-2 text-red-500"></i>
                    <div>
                        <h4 class="font-bold text-red-700">Analysis Failed</h4>
                        <p class="mt-1 text-red-600">${error.message || 'Unable to process symptoms'}</p>
        `;

        if (error.name === 'AbortError') {
            errorMessage += `
                        <div class="mt-3 bg-white p-2 rounded border border-red-100">
                            <p class="text-xs text-red-500">
                                <i class="fas fa-hourglass-end mr-1"></i>
                                The request timed out. Try with shorter symptom descriptions.
                            </p>
                        </div>
            `;
        } else {
            errorMessage += `
                        <div class="mt-3 bg-white p-2 rounded border border-red-100">
                            <p class="text-xs text-red-500">
                                <span class="font-medium">Try:</span>
                                <ul class="list-disc pl-5 mt-1">
                                    <li>More detailed descriptions (e.g., "fever for 2 days with headache")</li>
                                    <li>Checking your internet connection</li>
                                    <li>Waiting a few minutes before trying again</li>
                                </ul>
                            </p>
                        </div>
            `;
        }

        errorMessage += `</div></div></div>`;
        addMessage(errorMessage, false);

        console.error('Analysis Error:', error);
    } finally {
        sendBtn.disabled = false;
        userInput.focus();
    }
}

        // Start new symptom check
        function startNewChat() {
            fetch(`${API_URL}/new-chat`, {
                method: 'POST',
            })
            .then(response => {
                if (response.ok) {
                    messageContainer.innerHTML = `
                        <div class="welcome-message bg-blue-50 border border-blue-100 p-4 rounded-lg fade-in">
                            <div class="flex items-start space-x-3">
                                <div class="bg-blue-100 p-2 rounded-full">
                                    <i class="fas fa-robot text-blue-600"></i>
                                </div>
                                <div>
                                    <h3 class="font-bold text-blue-800">Welcome to HealthMate Symptom Checker</h3>
                                    <p class="text-blue-700">I can help you understand what might be causing your symptoms. Please describe:</p>
                                    <ul class="list-disc pl-5 mt-2 text-blue-700">
                                        <li>What symptoms you're experiencing</li>
                                        <li>How long you've had them</li>
                                        <li>Any other relevant health information</li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                    `;
                }
            })
            .catch(error => {
                console.error('Error:', error);
                addMessage(`
                    <div class="bg-red-50 border-l-4 border-red-400 p-3">
                        <strong>Error:</strong> Unable to start new chat. Please try again.
                    </div>
                `, false);
            });
        }

        // Event Listeners
        sendBtn.addEventListener('click', sendMessage);
        newChatBtn.addEventListener('click', startNewChat);
        emergencyBtn.addEventListener('click', () => {
            window.open('tel:911', '_blank');
        });

        userInput.addEventListener('keydown', (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                sendMessage();
            }
        });

        // Enable/disable send button based on input
        userInput.addEventListener('input', () => {
            sendBtn.disabled = userInput.value.trim() === '';
        });

        // Quick symptom tag selection
        symptomTags.forEach(tag => {
            tag.addEventListener('click', () => {
                if (userInput.value) {
                    userInput.value += `, ${tag.textContent}`;
                } else {
                    userInput.value = tag.textContent;
                }
                userInput.focus();
                sendBtn.disabled = false;
            });
        });

        // Initialize connection check
        checkConnection();
    </script>
</body>
</html>
